cluster:
  create: true
  # restart: true
  # restartRole:
  restartClusterRole: cluster-admin
  restartReducedImpact: true
  restartPrimaryFirst: false
  restartTimeout: 300
  instances: 2
  postgres:
    version: '13.4'
    extensions:
      - name: timescaledb
        version: "2.3.1"
      - name: cube
      - name: earthdistance
      - name: hstore
        version: "1.7"
      - name: pg_trgm
        version: "1.5"
    ssl:
      enabled: false
      # certificateSecretKeySelector:
      #   name:
      #   key:
      # privateKeySecretKeySelector:
      #   name:
      #   key:
  sgInstanceProfile: size-m
  postgresServices:
    primary:
      enabled: true
      type: NodePort
    replicas:
      enabled: true
      type: NodePort
  metadata:
    annotations:
      allResources:
        helm.sh/hook-weight: "3"
  #     clusterPods:
  #       key: value
  #     services:
  #       key: value
  #     primaryService:
  #       key: value
  #     replicasService:
  #       key: value
  #   labels:
  #     clusterPods:
  #       key: value
  pods:
    persistentVolume:
      size: 10Gi
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      storageClass: "openebs-hostpath"
    disableConnectionPooling: false
    disablePostgresUtil: false
    disableMetricsExporter: false
    scheduling:
      nodeSelector:
        dedicated.iotans.io: postgres
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #     - matchExpressions:
      #       - key: dedicated.iotans.io
      #         operator: In
      #         values:
      #           - postgres
      # tolerations:
      #   - key: dedicated.iotans.io
      #     operator: Exists
      #     value: postgres
      #     effect: NoExecute
      #     tolerationSeconds: 3600
  configurations:
    sgPostgresConfig: postgresconf
    sgPoolingConfig: pgbouncerconf
  distributedLogs:
    sgDistributedLogs: distributedlogs
    retention: 7 days

#  initialData:
#    scripts:
#      - name: create-superuser
#        script: |
#          CREATE ROLE dummy WITH LOGIN SUPERUSER PASSWORD '123456';
#      - name: create-superuser-from-secret
#        scriptFrom:
#          secretKeyRef:
#            name: stackgres-secret-sqls-scripts
#            key: create-stackgres-user.sql

  #restore:
  #  initialData:
  #    fromBackup:
  #      uid:
  #      pointInTimeRecovery:
  #        restoreToTimestamp:
  #    downloadDiskConcurrency:
  #  scripts:
  #  - name: create-stackgres-user
  #    scriptFrom:
  #      secretKeyRef: # read the user from a Secret to maintain credentials in a safe place
  #        name: stackgres-secret-sqls-scripts
  #        key: create-stackgres-user.sql
  #  - name: create-stackgres-database
  #    script: |
  #      CREATE DATABASE stackgres WITH OWNER stackgres;
  #  - name: create-stackgres-schema
  #    database: stackgres
  #    scriptFrom:
  #      configMapKeyRef: # read long script from a ConfigMap to avoid have to much data in the helm releasea and the sgcluster CR
  #        name: stackgres-sqls-scripts
  #        key: create-stackgres-schema.sql
  prometheusAutobind: true

instanceProfiles:
  - name: size-m
    cpu: "2"
    memory: "4Gi"
  - name: size-l
    cpu: "4"
    memory: "8Gi"
  - name: size-xl
    cpu: "6"
    memory: "16Gi"

configurations:
  create: true
  postgresconfig:
    postgresql.conf:
      shared_buffers: '1024MB'
      random_page_cost: '1.5'
      password_encryption: 'scram-sha-256'
      checkpoint_timeout: '30'
      # Logging configuration for pgbadger
      log_checkpoints: 'on'
      log_connections: 'on'
      log_disconnections: 'on'
      log_lock_waits: 'on'
      log_temp_files: '0'
      # Adjust the minimum time to collect data
      log_min_duration_statement: '5s'
      log_autovacuum_min_duration: '0'

  poolingconfig:
    pgBouncer:
      pgbouncer.ini:
        pool_mode: session
        max_client_conn: '500'
        default_pool_size: '30'
  backupconfig:
    create: false
    baseBackups:
      retention: 5
      cronSchedule: "*/2 * * * *"
      compression: lz4
      performance:
        uploadDiskConcurrency: 1
        #maxNetworkBandwitdh:
        #maxDiskBandwitdh:
    storage:
      s3: {}
      #  bucket: stackgres
      #  path: /mypath
      #  awsCredentials:
      #    secretKeySelectors:
      #      accessKeyId:
      #        name: awscredentials
      #        key: accesskey
      #      secretAccessKey:
      #        name: awscredentials
      #        key: secretkey
      #  region:
      #  storageClass:
      s3Compatible: {}
      #  bucket: stackgres
      #  path: /mypath
      #  awsCredentials:
      #    secretKeySelectors:
      #      accessKeyId:
      #        name: minio
      #        key: accesskey
      #      secretAccessKey:
      #        name: minio
      #        key: secretkey
      #  region: k8s
      #  endpoint: minio.stackgres.svc
      #  enablePathStyleAddressing: true
      #  storageClass:
      gcs: {}
      #  bucket: stackgres
      #  path: /mypath
      #  gcpCredentials:
      #    fetchCredentialsFromMetadataService: false
      #    secretKeySelectors:
      #      serviceAccountJSON:
      #        name: gcscredentials
      #        key: key
      azureBlob: {}
      #  bucket: stackgres
      #  path: /mypath
      #  azureCredentials:
      #    secretKeySelectors:
      #      storageAccount:
      #        name: azureblobcredentials
      #        key: storageaccount
      #      accessKey:
      #        name: azureblobcredentials
      #        key: accesskey

distributedLogs:
  enabled: false
  create: true
  persistentVolume:
    size: 5Gi
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    #  storageClass: "-"
  postgresServices:
    primary:
      type: NodePort
    replicas:
      enabled: true
      type: NodePort
  # scheduling:
  #   nodeSelector:
  #     dedicated.iotans.io: postgres
  #   tolerations:
  #     - key: dedicated.iotans.io
  #       operator: postgres
  #       value: Exists
  #       effect: NoSchedule
  #       tolerationSeconds: 10
  # metadata:
  #   annotations:
  #     allResources:
  #       key: value
  #     pods:
  #       key: valuepostgresql
  #     services:
  #       key: value

#You should only set following options for non production environment
nonProductionOptions:
  disableClusterPodAntiAffinity: false
